@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ChatMemory Memory
@inject JsonSettingsStore JsonSettingsStore
@inject IHttpContextAccessor HttpContextAccessor
@page "/"
<h3>Chat AI</h3>

<div class="mb-5" id="chat-container" style="max-height: 500px; overflow-y: auto;">
    <h4>Historia rozmowy:</h4>
    <ul>
        @foreach (var msg in _messages)
        {
            <li><b>@msg.Role:</b> @msg.Content</li>
        }
    </ul>
</div>

@if (_settings?.SuggestPrompts == true) //Nie może być @if (_settings.SuggestPrompts), bo będzie NullReferenceException.
{
    <div class="mb-3">
        <label class="mb-2">Wybierz prompt:</label>
        <select class="form-select" value="@_selectedPrompt" @onchange="OnPromptSelected">
            <option value="">-- Wybierz --</option>
            @foreach (var prompt in _availablePrompts)
            {
                <option value="@prompt">@prompt</option>
            }
        </select>
    </div>
}

<textarea class="form-control mb-3" @bind="_prompt" rows="5" placeholder="Wpisz pytanie"></textarea>

<button class="btn btn-primary" @onclick="SendPrompt" disabled="@_isLoading">
    @if (_isLoading)
    {
        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        @:Wysyłanie...
    }
    else
    {
        @:Wyślij
    }
</button>

@code {
    Models.Settings _settings;
    string _prompt, _selectedPrompt = "";
    bool _isLoading = false;
    List<ChatCompletionMessage> _messages = new();
    List<string> _availablePrompts = new();
    [Inject]
    public ILogger<Chat> Logger { get; set; } = default!;
    async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval",
                "document.getElementById('chat-container').scrollTop = document.getElementById('chat-container').scrollHeight");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Błąd przewijania: {ex.Message}");
        }
    }

    [Inject]
    public OpenAIService OpenAiService { get; set; }

    [Inject]
    public IWebHostEnvironment Environment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _messages.Add(new ChatCompletionMessage { Role = "system", Content = "Witaj! Jak mogę Ci pomóc?" });
        var userId = HttpContextAccessor.HttpContext?.User?.Identity?.Name;
        if (!string.IsNullOrEmpty(userId))
            _settings = JsonSettingsStore.Deserialize(userId);

        var webRootPath = Environment.WebRootPath;
        var csvFilePath = Path.Combine(webRootPath, "data", "prompts.csv");
        var lines = await File.ReadAllLinesAsync(csvFilePath);
        for (int i = 0; i < lines.Length; i++)
            if (!string.IsNullOrWhiteSpace(lines[i]))
                _availablePrompts.Add(lines[i]);
    }

    // async Task OnAfterRenderAsync()
    // {
    //     await ScrollToBottom();
    // }

    void OnPromptSelected(ChangeEventArgs e)
    {
        //_prompt = e.Value?.ToString();
        _selectedPrompt = e.Value?.ToString();

    }

    async Task SendPrompt()
    {
        try
        {
            _isLoading = true; 
            await ScrollToBottom();

            string textToSend = !string.IsNullOrWhiteSpace(_prompt)
                ? _selectedPrompt + _prompt
                : _selectedPrompt;

            if (!string.IsNullOrWhiteSpace(textToSend))
            {
                _messages.Add(new ChatCompletionMessage { Role = "User", Content = textToSend });
                var answer = await OpenAiService.GetAnswerAsync(textToSend, Memory);
                if (string.IsNullOrEmpty(answer))
                {
                    _messages.Add(new ChatCompletionMessage { Role = "System", Content = "Nie udało się uzyskać odpowiedzi od API." });
                    return;
                }
                _messages.Add(new ChatCompletionMessage { Role = "AI", Content = answer });

                _prompt = string.Empty; //Wyczyść pole tekstowe po wysłaniu
                _selectedPrompt = string.Empty; //Zresetuj rzeczywistą wartość z listy rozwijanej
                await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.form-select').value = ''"); //Zresetuj wyświetlaną wartość z listy rozwijanej


                await ScrollToBottom();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Błąd w metodzie SendPrompt");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
